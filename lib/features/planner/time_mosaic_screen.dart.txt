import 'dart:async';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:humble_time_app/helpers/prompt_library.dart';
import 'package:humble_time_app/services/voice_service.dart';

import 'package:humble_time_app/services/session_logger.dart';


class TimeMosaicScreen extends StatefulWidget {
  const TimeMosaicScreen({super.key});

  @override
  State<TimeMosaicScreen> createState() => _TimeMosaicScreenState();
}

class _TimeMosaicScreenState extends State<TimeMosaicScreen> {
  final List<int> blocks = List.generate(24, (i) => i); // 24 hours
  int? _selectedHour;
  final Duration _focusDuration = const Duration(minutes: 25);
  Timer? _timer;
  int _secondsRemaining = 0;

  @override
  void initState() {
    super.initState();
    VoiceService.speak(PromptLibrary.forEvent('welcomeBack'));
  }

  void onStartBlock(int hour) {
    setState(() {
      _selectedHour = hour;
      _secondsRemaining = _focusDuration.inSeconds;
    });

    VoiceService.speak(PromptLibrary.forEvent('startBlock'));
    _timer?.cancel();

    _timer = Timer.periodic(const Duration(seconds: 1), (timer) {
      if (_secondsRemaining > 0) {
        setState(() => _secondsRemaining--);
      } else {
        timer.cancel();
        onCompleteBlock();
      }
    });

    debugPrint('Timer started for block: $hour:00');
  }

/*  void onCompleteBlock() {
    VoiceService.speak(PromptLibrary.forEvent('completeBlock'));
    debugPrint('Block $_selectedHour completed.');
    // (TODO): Log session to local storage or journaling history
  }*/

  void onCompleteBlock() {
    VoiceService.speak(PromptLibrary.forEvent('completeBlock'));
    if (_selectedHour != null) {
      SessionLogger.logBlock(_selectedHour!);
    }
    debugPrint('Block $_selectedHour completed.');
  }


  @override
  void dispose() {
    _timer?.cancel();
    VoiceService.stop();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Time Mosaic'),
        /*leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => Navigator.pop(context),
        ),*/
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          //onPressed: () => context.pop(), // âœ… go_router-friendly
          onPressed: () => context.go('/'), // Navigate to home
        ),
      ),
      body: GridView.count(
        crossAxisCount: 6,
        padding: const EdgeInsets.all(8),
        children: blocks.map((hour) {
          final isSelected = _selectedHour == hour;
          final timeDisplay = isSelected
              ? '${(_secondsRemaining ~/ 60).toString().padLeft(2, '0')}:${(_secondsRemaining % 60).toString().padLeft(2, '0')}'
              : '$hour:00';

          return GestureDetector(
            onTap: () => onStartBlock(hour),
            child: Container(
              margin: const EdgeInsets.all(4),
              decoration: BoxDecoration(
                color: isSelected ? Colors.tealAccent : Colors.blueGrey.shade200,
                borderRadius: BorderRadius.circular(8),
                border: isSelected
                    ? Border.all(color: Colors.teal, width: 2)
                    : null,
              ),
              child: Center(
                child: Text(
                  timeDisplay,
                  style: TextStyle(
                    fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                    color: isSelected ? Colors.black : Colors.grey.shade800,
                  ),
                ),
              ),
            ),
          );
        }).toList(),
      ),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: 2, // Mosaic tab
        onTap: (index) {
          switch (index) {
            case 0:
              context.go('/');
              break;
            case 1:
              context.go('/journal');
              break;
            case 2:
              // Already here
              break;
          }
        },
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.home),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.edit),
            label: 'Journal',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.grid_view),
            label: 'Mosaic',
          ),
        ],
      ),
    );
  }
}
