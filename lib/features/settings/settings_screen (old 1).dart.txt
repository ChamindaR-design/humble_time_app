import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:humble_time_app/core/providers/user_settings_provider.dart';
import 'package:humble_time_app/services/hive_service.dart';
import 'package:humble_time_app/utils/export_import_service.dart';
import 'package:share_plus/share_plus.dart';
//import 'package:cross_file/cross_file.dart';
import 'package:humble_time_app/core/themes/app_theme.dart';
import 'package:humble_time_app/widgets/language_picker.dart';

class SettingsScreen extends ConsumerWidget {
  const SettingsScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final settingsProvider = ref.watch(userSettingsProvider);
    final settings = settingsProvider.settings;
    final spacing = settings.isLayoutExpanded ? 24.0 : 12.0;

    return Scaffold(
      appBar: AppBar(
        title: const Text('Settings'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/'),
        ),
      ),
      body: ListView(
        padding: EdgeInsets.all(spacing),
        physics: const BouncingScrollPhysics(),
        children: [
          const Text('Accessibility & Preferences',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
          const SizedBox(height: 20),

          SwitchListTile(
            title: const Text('Enable Voice Nudges'),
            subtitle: const Text('Gentle auditory reminders for pacing'),
            value: settings.enableVoiceNudge,
            onChanged: (val) {
              HapticFeedback.selectionClick();
              settingsProvider.toggleVoiceNudge(val);
            },
            secondary: const Icon(Icons.volume_up),
          ),

          SwitchListTile(
            title: const Text('Expanded Neurodivergent Layout'),
            subtitle: const Text('Extra spacing and reduced density'),
            value: settings.isLayoutExpanded,
            onChanged: (val) {
              HapticFeedback.selectionClick();
              settingsProvider.toggleLayoutExpanded(val);
            },
            secondary: const Icon(Icons.format_line_spacing),
          ),

          const Divider(height: 40),
          const Text('Voice Profile',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
          const SizedBox(height: 8),
          const Text('Pitch'),
          Slider(
            value: settings.voicePitch,
            min: 0.5,
            max: 2.0,
            divisions: 15,
            label: settings.voicePitch.toStringAsFixed(1),
            onChanged: (val) {
              HapticFeedback.selectionClick();
              settingsProvider.setVoicePitch(val);
            },
            semanticFormatterCallback: (val) =>
                'Voice pitch ${val.toStringAsFixed(1)}',
          ),
          const Text('Speed'),
          Slider(
            value: settings.voiceSpeed,
            min: 0.3,
            max: 1.0,
            divisions: 14,
            label: settings.voiceSpeed.toStringAsFixed(1),
            onChanged: (val) {
              HapticFeedback.selectionClick();
              settingsProvider.setVoiceSpeed(val);
            },
            semanticFormatterCallback: (val) =>
                'Voice speed ${val.toStringAsFixed(1)}',
          ),

          const Divider(height: 40),
          const Text('Block Durations',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
          const SizedBox(height: 8),
          const Text('Default'),
          _durationDropdown(settings.defaultBlockDuration,
              settingsProvider.updateDefaultDuration),
          const Text('Focus'),
          _durationDropdown(settings.focusBlockDuration,
              settingsProvider.updateFocusDuration),
          const Text('Break'),
          _durationDropdown(settings.breakBlockDuration,
              settingsProvider.updateBreakDuration),

          const Divider(height: 40),
          const Text('Appearance',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
          const SizedBox(height: 8),
          DropdownButton<Brightness>(
            value: settings.preferredBrightness,
            items: const [
              DropdownMenuItem(
                value: Brightness.light,
                child: Text('Light Mode'),
              ),
              DropdownMenuItem(
                value: Brightness.dark,
                child: Text('Dark Mode'),
              ),
            ],
            onChanged: (newBrightness) {
              if (newBrightness != null) {
                HapticFeedback.selectionClick();
                settingsProvider.setPreferredBrightness(newBrightness);
              }
            },
          ),
          const SizedBox(height: 8),
          DropdownButton<String>(
            value: settings.colorPalette,
            items: AppTheme.availablePalettes.map((palette) {
              return DropdownMenuItem(
                value: palette,
                child: AppTheme.palettePreview(palette),
              );
            }).toList(),
            /*onChanged: (newValue) {
              if (val != null) {
                HapticFeedback.selectionClick();
                settingsProvider.setColorPalette(val);
              }
            },*/
            onChanged: (newValue) {
              if (newValue != null) {
                HapticFeedback.selectionClick();
                settingsProvider.setColorPalette(newValue);
              }
            },
          ),

          if (!bool.fromEnvironment('dart.vm.product')) _buildDevTools(context),
        ],
      ),
    );
  }

  Widget _buildDevTools(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Divider(height: 40),
        const Text('🛠️ Developer Tools',
            style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
        const SizedBox(height: 8),

        ElevatedButton.icon(
          icon: const Icon(Icons.download),
          label: const Text('Export Reflections to File'),
          onPressed: () => _previewAndExport(context),
        ),

        const SizedBox(height: 16),
        Text('Language', style: Theme.of(context).textTheme.titleMedium),
        const SizedBox(height: 8),
        Semantics(
          label: 'Language picker for app localization',
          child: const LanguagePicker(),
        ),

        const SizedBox(height: 16),
        ElevatedButton.icon(
          icon: const Icon(Icons.share),
          label: const Text('Share Reflections File'),
          onPressed: () async {
            final reflections = await HiveService.exportToJson();
            final file = await ExportImportService.exportReflectionsToJson(reflections);
            await Share.shareXFiles([XFile(file.path)], text: 'My reflections export');
          },
        ),

        const SizedBox(height: 8),
        ElevatedButton.icon(
          icon: const Icon(Icons.restore),
          label: const Text('Restore Reflections from File'),
          onPressed: () async {
            final imported = await ExportImportService.importEntriesFromJson();
            if (imported != null) {
              final json = imported.map((e) => e).toList();
              await HiveService.restoreFromJson(jsonEncode(json));
              if (context.mounted) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Reflections restored from file')),
                );
              }
            }
          },
        ),

        const SizedBox(height: 8),
        ElevatedButton.icon(
          icon: const Icon(Icons.restore),
          label: const Text('Restore Reflections from JSON'),
          onPressed: () async {
            final controller = TextEditingController();
            await showDialog(
              context: context,
              builder: (_) => AlertDialog(
                title: const Text('Paste JSON to Restore'),
                content: TextField(
                  controller: controller,
                  maxLines: 10,
                  decoration: const InputDecoration(
                    hintText: 'Paste exported JSON here',
                    border: OutlineInputBorder(),
                  ),
                ),
                actions: [
                  TextButton(
                    onPressed: () => Navigator.pop(context),
                    child: const Text('Cancel'),
                  ),
                  ElevatedButton(
                    onPressed: () async {
                      final json = controller.text;
                      try {
                        await HiveService.restoreFromJson(json);
                        if (context.mounted) {
                          Navigator.pop(context);
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(content: Text('Reflections restored')),
                          );
                        }
                      } catch (e) {
                        if (context.mounted) {
                          Navigator.pop(context);
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(content: Text('Failed to restore: ${e.toString()}')),
                          );
                        }
                      }
                    },
                    child: const Text('Restore'),
                  ),
                ],
              ),
            );
          },
        ),

        const SizedBox(height: 8),
        ElevatedButton.icon(
          icon: const Icon(Icons.delete_forever),
          label: const Text('Clear All Reflections'),
          style: ElevatedButton.styleFrom(backgroundColor: Colors.redAccent),
          onPressed: () async {
            final confirmed = await showDialog<bool>(
              context: context,
              builder: (_) => AlertDialog(
                title: const Text('Confirm Clear'),
                content: const Text('Are you sure you want to delete all reflections?'),
                actions: [
                  TextButton(onPressed: () => Navigator.pop(context, false), child: const Text('Cancel')),
                  ElevatedButton(onPressed: () => Navigator.pop(context, true), child: const Text('Delete')),
                ],
              ),
            );

            if (confirmed == true) {
              await HiveService.clearAllReflections();
              if (context.mounted) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('All reflections cleared')),
                );
              }
            }
          },
        ),
      ],
    );
  }

    Future<void> _previewAndExport(BuildContext context) async {
      final reflections = await HiveService.exportToJson();

      if (!context.mounted) return; // ✅ Guard before using context

      await showDialog(
        context: context,
        builder: (_) => AlertDialog(
          title: const Text('Preview Reflections JSON'),
          content: SingleChildScrollView(
            child: SelectableText(reflections),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel'),
            ),
            ElevatedButton.icon(
              icon: const Icon(Icons.save),
              label: const Text('Save to File'),
              onPressed: () async {
                try {
                  final file = await ExportImportService.exportReflectionsToJson(reflections);
                  if (!context.mounted) return; // ✅ Guard again after async
                  Navigator.pop(context);
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Reflections saved to ${file.path}')),
                  );
                } catch (e) {
                  if (!context.mounted) return; // ✅ Guard again
                  Navigator.pop(context);
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Failed to save: ${e.toString()}')),
                  );
                }
              },
            ),
          ],
        ),
      );
    }

  DropdownButton<Duration> _durationDropdown(
      Duration current, void Function(Duration) onChange) {
    return DropdownButton<Duration>(
      value: current,
      items: [
        const Duration(minutes: 5),
        const Duration(minutes: 15),
        const Duration(minutes: 25),
        const Duration(minutes: 45),
        const Duration(minutes: 60),
      ].map((duration) => DropdownMenuItem(
            value: duration,
            child: Text('${duration.inMinutes} minutes'),
          )).toList(),
      onChanged: (duration) {
        if (duration != null) {
          HapticFeedback.selectionClick();
          onChange(duration);
        }
      },
    );
  }
}